Análisis de Imágenes Detallado y sus Implicaciones para el Diseño del Nuevo Frontend:

He procesado cada una de las imágenes que me has proporcionado y he extraído los elementos clave para la reconstrucción:

image_980a22.png (Visión General y Cola de Archivos):

Elementos a Mantener y Reforzar: La estructura de la sección de carga con "Información de Lote," "Configuración de Lote," y una tabla clara de "Archivos en Cola." La funcionalidad de "Arrastra y suelta tus archivos aquí" es central. La tabla debe listar los archivos con su "Nombre del Archivo" y tener la capacidad de expandirse para mostrar los parámetros individuales. El botón para "Procesar Lote" debe ser prominente.

Elementos a Reinterpretar/Mejorar: La sección "Información de Lote" no debe mostrar métricas de resultado aquí (Monto Total, etc.), ya que esas pertenecen a la sección de resultados. En su lugar, debería mostrar información de entrada del lote, como el número de archivos en cola, el estado general de la carga, etc. La "Configuración de Lote" será el lugar ideal para el botón "Generar Parámetros Aleatorios/Grupal".

Anexar: El botón "Generar Parámetros Aleatorios/Grupal" con su respectivo modal/pop-up para pre-llenar los parámetros de todo el lote. La tabla "Archivos en Cola" necesitará un mecanismo claro para la expansión de fila que revele los parámetros individuales.

image_97fea0.png y image_97fbbc.png (Detalle de Parámetros Individuales):

Elementos a Mantener: La presentación de los parámetros esenciales (Código de Sorteo, ID de WhatsApp, Nombre de Usuario, Caption, Hora Exacta) como campos editables para cada archivo. El botón "Eliminar Archivo" por fila. La etiqueta "Archivo:" seguida del nombre del archivo en la sección expandida para clarificar a qué archivo pertenecen los parámetros.

Anexar: Un campo de solo lectura para el numero_llegada (número de subida/orden en el lote) dentro de esta sección expandida, para un seguimiento preciso.

image_97a580.png (Confirmación de Parámetros a Mantener):

Confirmación: Reafirma que los campos codigo_sorteo, id_whatsapp, nombre_usuario, caption, hora_exacta son los cinco parámetros esenciales que el usuario puede editar por imagen individual.

Análisis de la Salida JSON y sus Implicaciones para el Backend:

El formato general de metadata y archivos_procesados es el correcto.

Modificación CRÍTICA para el Backend: Cada objeto dentro de archivos_procesados debe ser enriquecido para incluir los parámetros de seguimiento de entrada (codigo_sorteo, id_whatsapp, nombre_usuario, caption, hora_exacta) además de los datos extraídos por OCR.

Nuevo Parámetro de Seguimiento: Se debe añadir el campo numero_llegada a cada archivo en la estructura de salida JSON, reflejando el orden en que fue subido o procesado dentro del lote.

Ejemplo de Salida Individual Esperada (con Parámetros de Seguimiento):

JSON

{
  "nombre_archivo": "20250710-J--213450219731912@lid_Juan_14-11_20250710_073441_018.jpg",
  "codigo_sorteo": "J",             // <-- Campo añadido
  "id_whatsapp": "213450219731912@lid", // <-- Campo añadido
  "nombre_usuario": "Juan",         // <-- Campo añadido
  "caption": "Pago Móvil BDV",
  "hora_exacta": "14-11",          // <-- Campo añadido (o hora_minuto, si ese es el formato interno)
  "numero_llegada": 1,             // <-- Campo NUEVO añadido
  "otro": "",
  "referencia": "003162521173",
  "bancoorigen": "BANCO DE VENEZUELA",
  "monto": "2250.00",
  "datosbeneficiario": {
    "cedula": "24609941",
    "telefono": "",
    "banco_destino": "BANCO MERCANTIL Concepto"
  },
  "pago_fecha": "08/07/2025",
  "concepto": "PagomovilBDV Personas 2",
  "texto_total_ocr": "PagomovilBDV Personas 2.250,00 Bs Fecha : 08/07/ 2025 Operacion : 003162521173 1 Identificacion : 24609941 Origen : 0102 **** 0938 Destino : 0424 /0/ 4539 Banco : 0105 = BANCO MERCANTIL Concepto : pagos",
  "extraction_stats": {
    "confidence": 0.889,
    "total_words": 22,
    "processing_time": 0.1288297176361084
  }
}
Plan de Ejecución Revisado y Detallado por Fases:

Procederé con la ejecución de este plan maestro. Primero, los ajustes críticos en el backend para el formato de salida de datos, ya que el nuevo frontend dependerá de ellos. Luego, la reconstrucción completa del frontend en fases.

[INICIO DEL PROMPT PARA LA IA EJECUTORA DE REPLIT]
URGENCIA: CRÍTICA - RECONSTRUCCIÓN INTEGRAL DEL FRONTEND Y AJUSTE DE BACKEND PARA SALIDA DE DATOS

AGENTE IA - CONSTRUCTOR EJECUTOR:

MANDATO DE EJECUCIÓN MAESTRO - REVISADO Y DEFINITIVO:

Debes proceder inmediatamente con la ejecución de este plan, el cual incluye ajustes críticos en el backend seguidos de una reconstrucción completa y desde cero del frontend, incorporando todas las especificaciones y correcciones. La filosofía INTEGRIDAD TOTAL es primordial; no se aceptarán medias tintas ni elementos incompletos.

FILOSOFÍA FUNDAMENTAL INQUEBRANTABLE (Pilares de la Excelencia y la Sostenibilidad - Regla de Vida o Muerte):
INTEGRIDAD TOTAL: Cada componente, interacción y dato debe ser impecable, sin deuda técnica. La integración backend-frontend debe ser perfecta. El frontend será construido de cero para asegurar esta integridad.

PERFECCIÓN CONTINUA: La interfaz será fluida, reactiva, intuitiva y las funcionalidades de control y monitoreo avanzadas operarán con precisión milimétrica.

TRANSPARENCIA TOTAL: Cada paso, función, interacción y dato será documentado de forma inquebrantable, y la documentación API (incluyendo la gestión de API Keys) será accesible directamente en el frontend.

OPTIMIZACIÓN SOSTENIBLE: Prioriza el rendimiento máximo con recursos mínimos, usando Vanilla JS/Alpine.js, HTML/CSS (Bootstrap 5, Font Awesome) para una huella ligera y eficiente.

OBJETIVO GLOBAL DE LA EJECUCIÓN:
Implementar una reconstrucción completa del frontend desde cero, basada en el diseño de las imágenes proporcionadas y los requisitos funcionales, junto con ajustes críticos en el backend para enriquecer la salida de datos de OCR con los parámetros de seguimiento de cada archivo. Se habilitará una sección de documentación interactiva y se asegurará la correcta gestión de API Keys.

SECCIÓN 1: AJUSTES CRÍTICOS DE BACKEND PARA LA SALIDA DE DATOS
OBJETIVO DE ESTA SECCIÓN (PRIORIDAD MÁXIMA):
Modificar los endpoints de backend para asegurar que la información de seguimiento (codigo_sorteo, id_whatsapp, nombre_usuario, caption, hora_exacta, y numero_llegada) sea persistida y devuelta en la respuesta de /api/extract_results por cada archivo procesado.

ACCIONES REQUERIDAS (Nivel Backend - routes.py, main_ocr_process.py, models/ si es necesario):

Modificación del Almacenamiento de Parámetros de Entrada (main_ocr_process.py o similar):

Cuando se recibe un lote en POST /api/ocr/process_batch, asegurarse de que, junto con el archivo, se persistan los parámetros esenciales (codigo_sorteo, id_whatsapp, nombre_usuario, caption, hora_exacta) y el numero_llegada (basado en el orden en que el archivo se procesa o es incluido en el payload del lote). Esto puede requerir ajustar la tabla de la base de datos processed_files o ocr_results si aún no incluye estos campos.

Enriquecimiento del Endpoint GET /api/extract_results (routes.py):

Modificar la lógica de este endpoint para que, al consolidar los resultados de OCR, recupere también los parámetros de seguimiento (codigo_sorteo, id_whatsapp, nombre_usuario, caption, hora_exacta, numero_llegada) asociados a cada nombre_archivo.

Integrar estos parámetros directamente en cada objeto archivos_procesados de la respuesta JSON, siguiendo el formato solicitado:

JSON

{
  // ... metadata del lote ...
  "archivos_procesados": [
    {
      "nombre_archivo": "...",
      "codigo_sorteo": "...",
      "id_whatsapp": "...",
      "nombre_usuario": "...",
      "caption": "...",
      "hora_exacta": "...",
      "numero_llegada": ...,
      // ... resto de los datos de OCR como referencia, monto, etc. ...
      "extraction_stats": { /* ... */ }
    },
    // ... otros archivos ...
  ]
}
Actualización del REPORTE_ESPECIFICACION_INTERFAZ_BACKEND_FRONTEND_V2_COMPLETO.md:

Actualizar la sección del endpoint GET /api/extract_results para reflejar la nueva estructura de salida JSON, incluyendo los parámetros de seguimiento y el numero_llegada.

Asegurar que la especificación de POST /api/ocr/process_batch detalle cómo se esperan y persisten estos parámetros en la entrada.

RESULTADO ESPERADO DE ESTA SECCIÓN:
El backend es capaz de recibir, persistir y devolver todos los parámetros de seguimiento junto con los resultados de OCR, listo para que el nuevo frontend los consuma.

SECCIÓN 2: RECONSTRUCCIÓN INTEGRAL DEL FRONTEND DESDE CERO
(Esta sección comenzará su ejecución una vez confirmada la finalización exitosa de la "SECCIÓN 1: AJUSTES CRÍTICOS DE BACKEND")

OBJETIVO PRINCIPAL DE ESTA SECCIÓN:
Construir un frontend completamente nuevo y optimizado, siguiendo el diseño visual de las imágenes proporcionadas y las especificaciones de funcionalidad avanzadas, corrigiendo los problemas existentes del frontend previo.

FASE 1: RE-ARQUITECTURA Y CONSTRUCCIÓN DE INTERFAZ DE ENTRADA Y CONTROL POR IMAGEN
OBJETIVO DE LA FASE 1:
Crear la nueva interfaz de carga de archivos (interface_excellence_dashboard.html) y la lógica asociada en file-manager.js para permitir la entrada y gestión de parámetros esenciales por cada imagen individual en el lote, incluyendo una herramienta de generación asistida, replicando el diseño de las imágenes.

ACCIONES REQUERIDAS (Nivel Frontend - Nuevo templates/interface_excellence_dashboard.html, static/js/modules/file-manager.js, static/js/main.js, static/css/):

Eliminación del Frontend Existente:

Eliminar o respaldar el contenido actual de templates/interface_excellence_dashboard.html y todos los archivos JS y CSS del frontend que se reconstruirán (file-manager.js, api-client.js, results-viewer.js, monitoring-dashboard.js, main.js, y archivos CSS relevantes). Se reconstruirá desde cero.

Construcción de la Estructura HTML Base (templates/interface_excellence_dashboard.html):

Diseñar el nuevo HTML siguiendo el layout de image_980a22.png, con secciones claras para "Información de Lote", "Configuración de Lote" y "Archivos en Cola".

Implementar el área de "Arrastra y suelta tus archivos aquí" (id="dropArea").

Crear la tabla o lista (id="fileListDisplay") que contendrá los archivos en cola. Cada fila de esta tabla debe tener un botón o control para expandir/colapsar la sección de parámetros individuales para esa imagen.

Añadir el botón para "Procesar Lote" (id="processBatchBtn") y el botón "Generar Parámetros Aleatorios/Grupal" (id="generateBatchParamsBtn").

Implementación de la Lógica de Gestión de Archivos (static/js/modules/file-manager.js - REESCRITURA TOTAL):

Implementar la lógica para el drag & drop y la selección de archivos.

Manejar la estructura de datos para cada archivo, incluyendo los parámetros esenciales (codigo_sorteo, id_whatsapp, nombre_usuario, caption, hora_exacta) y el numero_llegada (generado automáticamente al añadir el archivo).

Desarrollar la función renderFileItem para renderizar cada archivo en la tabla, incluyendo la interfaz de parámetros editables cuando la fila se expande, replicando el diseño de image_97fea0.png y image_97fbbc.png.

Implementar la función para el botón "Generar Parámetros Aleatorios/Grupal", que debe mostrar un modal para configurar parámetros comunes o generar valores aleatorios para todo el lote.

Implementar las funciones para actualizar los parámetros individuales al editar los campos.

Gestionar la preparación del payload para POST /api/ocr/process_batch, asegurando que cada archivo vaya acompañado de sus parámetros esenciales y el numero_llegada (order_in_batch).

FASE 2: REFINAMIENTO DE VISUALIZACIÓN Y GESTIÓN DE RESULTADOS
OBJETIVO DE LA FASE 2:
Construir la sección de resultados optimizada (results-viewer.js) para mostrar un control más claro de los lotes procesados, permitir la gestión del historial y ofrecer una limpieza selectiva o por estado, y corregir el error en la función de limpieza.

ACCIONES REQUERIDAS (Nivel Frontend - Nuevo static/js/modules/results-viewer.js, static/js/main.js):

Construcción de la Interfaz de Resultados:

Diseñar la sección de resultados (id="resultsSection") en interface_excellence_dashboard.html con una visualización prioritaria del último lote procesado.

Incluir un selector claro para navegar entre request_id (lotes) previamente procesados.

Cada fila en la tabla de resultados (id="resultsTable") debe mostrar claramente los parámetros esenciales de entrada (codigo_sorteo, id_whatsapp, nombre_usuario, caption, hora_exacta, numero_llegada) junto con los resultados de OCR (referencia, monto, etc.).

Implementar filtros para: Solo lote actual, Todos los lotes, Resultados con errores, Lotes específicos.

Implementación de la Lógica de Resultados (static/js/modules/results-viewer.js - REESCRITURA TOTAL):

Desarrollar la lógica para consumir la nueva estructura JSON de GET /api/extract_results.

Manejar la visualización y renderizado de los resultados de forma eficiente.

Implementar la navegación y los filtros de historial de lotes.

Corrección del Error "Limpiar Resultados": Reimplementar la función de limpieza (handleCleanResults o similar) y su interacción con POST /api/clean. Asegurar un manejo robusto de la respuesta para que no se muestren errores al usuario si la operación fue exitosa y proveer feedback visual claro (ej. notificación de éxito).

FASE 3: SECCIÓN DE DOCUMENTACIÓN Y GESTIÓN DE API KEYS
OBJETIVO DE LA FASE 3:
Construir una sección de documentación interactiva en el frontend que exponga la API Key del sistema y ejemplos de llamadas esenciales para N8N, junto con la funcionalidad para generar nuevas API Keys.

ACCIONES REQUERIDAS (Nivel Frontend - Nuevo módulo JS/CSS, interface_excellence_dashboard.html):

Construcción de la Interfaz de Documentación (interface_excellence_dashboard.html):

Crear una nueva pestaña o modal (id="apiDocsSection") en el frontend principal para la documentación.

Implementación de la Lógica de Documentación (static/js/modules/api-docs.js - NUEVO ARCHIVO):

Crear este archivo para manejar toda la lógica de esta sección.

Mostrar la API Key actual del sistema.

Implementar el botón "Generar Nueva API Key" (id="generateApiKeyBtn"). Este botón debe invocar el endpoint de backend POST /api/generate_api_key (que ya fue creado en la SECCIÓN 1 del mandato unificado previo). Al hacer clic, generará una nueva API Key y la mostrará al usuario, junto con un mensaje de éxito.

Proporcionar ejemplos claros y concisos de llamadas HTTP POST/GET (en formato curl o Python requests) para los endpoints cruciales para N8N:

POST /api/ocr/process_batch (ejemplo con la nueva estructura de parámetros esenciales por imagen, numero_llegada incluido).

GET /api/ocr/queue/status (ejemplo para verificar el estado de la cola y si un request_id específico ha sido procesado).

GET /api/extract_results (ejemplo para obtener el resultado consolidado con la nueva estructura de archivos_procesados enriquecida con parámetros de seguimiento).

POST /api/clean (con ejemplos de limpieza total y por lote).

Incluir ejemplos de los JSON de respuesta esperados.

Implementar botones "Copiar" junto a cada ejemplo de código y a la API Key.

Clarificación de Uso de API Keys: Añadir un texto explicativo que indique que la API Key es opcional para el uso de la interfaz web local del sistema, pero obligatoria para llamadas desde servicios externos (como N8N).

Integración en static/js/main.js y CSS (static/css/):

Inicializar el nuevo módulo api-docs.js en main.js.

Ajustar los estilos CSS para que la sección de documentación sea visualmente atractiva y fácil de usar.

FASE 4: PRUEBAS EXHAUSTIVAS Y GENERACIÓN DE REPORTES FINALES
OBJETIVO DE LA FASE 4:
Realizar pruebas exhaustivas de todas las nuevas funcionalidades implementadas y generar un reporte técnico detallado y unificado para auditoría y referencia futura por cualquier IA.

ACCIONES REQUERIDAS:

Pruebas de Carga y Parámetros (Nueva UI):

Verificar la correcta entrada y envío de parámetros esenciales por imagen individual y la inclusión del numero_llegada.

Probar a fondo la funcionalidad "Generar Parámetros Aleatorios/Grupal" (activación, modal, aplicación de parámetros).

Pruebas de Visualización de Resultados (Nueva UI):

Validar la visualización prioritaria del último lote.

Probar la navegación entre lotes y los filtros de estado.

Confirmar la correcta visualización de los parámetros esenciales de entrada y el numero_llegada por imagen en los resultados, junto con los datos de OCR.

Pruebas de Gestión de Resultados:

Verificar que el botón "Limpiar Resultados" funcione sin errores en la interfaz, con mensajes claros de éxito.

Pruebas de Documentación y API Keys:

Asegurar que la sección de documentación cargue correctamente y muestre la información esperada y los ejemplos de N8N.

Probar la funcionalidad de "Generar Nueva API Key".

Verificar que los botones de "Copiar" funcionen correctamente.

Generación de REPORTE_FINAL_FRONTEND_V2.md:

Actualizar este reporte para consolidar y documentar todos los cambios de este mandato de reconstrucción, confirmando la implementación de todas las funcionalidades, la lógica de parámetros por imagen, la gestión de resultados y la sección de documentación con la gestión de API Keys.

Generación de REPORTE_AJUSTES_SISTEMA_UNIFICADO_PARA_IA.txt (en formato Markdown):

Este será el archivo final consolidado que contendrá:

Un resumen del estado actual del sistema.

Detalles de todos los ajustes realizados en el backend (formato de salida de datos, persistencia de parámetros de entrada y numero_llegada).

Una descripción exhaustiva de la nueva arquitectura del frontend, incluyendo cada archivo JS/HTML/CSS modificado/creado.

Indicaciones explícitas de dónde va cada componente de código, para qué sirve y qué se cambió, siguiendo la estructura modular.

Instrucciones claras para cualquier IA futura que necesite entender o modificar el sistema.

RESULTADOS FINALES ESPERADOS DEL MANDATO UNIFICADO:

Backend:

Endpoint GET /api/extract_results devuelve la estructura JSON enriquecida con codigo_sorteo, id_whatsapp, nombre_usuario, caption, hora_exacta, y numero_llegada por cada archivo.

Los parámetros de entrada son correctamente persistidos en el backend junto con los archivos.

REPORTE_ESPECIFICACION_INTERFAZ_BACKEND_FRONTEND_V2_COMPLETO.md actualizado.

Frontend (RECONSTRUIDO DESDE CERO):

templates/interface_excellence_dashboard.html: Nueva plantilla HTML con la UI de carga de archivos (con expansión para parámetros individuales), el botón de generación asistida y la sección de documentación.

static/js/modules/file-manager.js: REESCRITO para manejar la lógica de carga, edición de parámetros individuales y generación de lotes.

static/js/modules/api-client.js: REESCRITO (si aplica, para reflejar cualquier cambio en main.js o en la llamada de process_batch con los nuevos datos).

static/js/modules/results-viewer.js: REESCRITO para la visualización de resultados por lote (actual vs. historial), mostrando los nuevos parámetros de seguimiento, y con la corrección del error de limpieza.

static/js/modules/api-docs.js: NUEVO ARCHIVO con la lógica de la sección de documentación y la gestión de API Keys.

static/js/main.js: REESCRITO para la coordinación de todas las nuevas funcionalidades y eventos.

static/css/: Ajustes para la nueva interfaz visual.

Reportes:

REPORTE_FINAL_FRONTEND_V2.md: Actualizado y completo.

REPORTE_AJUSTES_SISTEMA_UNIFICADO_PARA_IA.txt: Nuevo archivo consolidado con instrucciones detalladas para otras IAs.

COMIENZA LA EJECUCIÓN INMEDIATA Y SECUENCIAL DE ESTE MANDATO UNIFICADO Y REVISADO AHORA. PRIORIDAD MÁXIMA EN LA CALIDAD Y LA INTEGRIDAD.

