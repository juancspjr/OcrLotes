#!/usr/bin/env python3
"""
TEST INTEGRAL MANDATO 5 - REFINAMIENTO EXHAUSTIVO DE EXTRACTION_RULES.JSON
Filosof√≠a: Integridad Total y Perfecci√≥n Continua
Fecha: 2025-07-10 06:22 UTC

Este test valida que todas las reglas de extracci√≥n tengan configuraci√≥n espacial
implementada correctamente y que el sistema mantenga compatibilidad total.
"""

import json
import logging
import time
from typing import Dict, List, Any
import os
import sys

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_validacion_json_estructura():
    """
    PUNTO DE CONTROL #1: Validaci√≥n de estructura JSON de extraction_rules.json
    """
    logger.info("üîç PUNTO DE CONTROL #1: Validando estructura JSON...")
    
    try:
        with open('config/extraction_rules.json', 'r', encoding='utf-8') as f:
            rules_data = json.load(f)
        
        # Validar estructura principal
        assert 'dynamic_geometry_config' in rules_data, "‚ùå Falta dynamic_geometry_config"
        assert 'extraction_rules' in rules_data, "‚ùå Falta extraction_rules"
        
        # Validar configuraci√≥n din√°mica
        geometry_config = rules_data['dynamic_geometry_config']
        assert geometry_config['enabled'] == True, "‚ùå dynamic_geometry_config no est√° habilitada"
        
        logger.info("‚úÖ PUNTO DE CONTROL #1 PASSED: Estructura JSON v√°lida")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå PUNTO DE CONTROL #1 FAILED: {e}")
        return False

def test_validacion_spatial_search_config():
    """
    PUNTO DE CONTROL #2: Todas las reglas tienen spatial_search_config
    """
    logger.info("üîç PUNTO DE CONTROL #2: Validando spatial_search_config en todas las reglas...")
    
    try:
        with open('config/extraction_rules.json', 'r', encoding='utf-8') as f:
            rules_data = json.load(f)
        
        total_reglas = 0
        reglas_con_spatial = 0
        reglas_sin_spatial = []
        
        for field_group in rules_data['extraction_rules']:
            field_name = field_group['field_name']
            for rule in field_group['rules']:
                total_reglas += 1
                rule_id = rule.get('rule_id', 'UNKNOWN')
                
                if 'spatial_search_config' in rule:
                    reglas_con_spatial += 1
                    # Validar estructura de spatial_search_config
                    spatial_config = rule['spatial_search_config']
                    assert 'enabled' in spatial_config, f"‚ùå {rule_id}: Falta 'enabled'"
                    assert 'search_directions' in spatial_config, f"‚ùå {rule_id}: Falta 'search_directions'"
                    assert 'max_distance_to_keyword_px' in spatial_config, f"‚ùå {rule_id}: Falta 'max_distance_to_keyword_px'"
                else:
                    reglas_sin_spatial.append(f"{field_name}:{rule_id}")
        
        logger.info(f"üìä Total reglas: {total_reglas}")
        logger.info(f"üìä Reglas con spatial_search_config: {reglas_con_spatial}")
        logger.info(f"üìä Cobertura espacial: {(reglas_con_spatial/total_reglas)*100:.1f}%")
        
        if reglas_sin_spatial:
            logger.warning(f"‚ö†Ô∏è  Reglas sin spatial_search_config: {reglas_sin_spatial}")
        
        # MANDATO 5 requiere 100% de cobertura espacial
        if reglas_con_spatial == total_reglas:
            logger.info("‚úÖ PUNTO DE CONTROL #2 PASSED: 100% de reglas tienen configuraci√≥n espacial")
            return True
        else:
            logger.error(f"‚ùå PUNTO DE CONTROL #2 FAILED: Solo {reglas_con_spatial}/{total_reglas} reglas tienen configuraci√≥n espacial")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå PUNTO DE CONTROL #2 FAILED: {e}")
        return False

def test_integracion_aplicador_ocr():
    """
    PUNTO DE CONTROL #3: AplicadorOCR carga reglas sin errores
    """
    logger.info("üîç PUNTO DE CONTROL #3: Testando carga de reglas en AplicadorOCR...")
    
    try:
        # Importar y instanciar AplicadorOCR
        sys.path.append('.')
        from aplicador_ocr import AplicadorOCR
        
        # Crear instancia y cargar reglas
        aplicador = AplicadorOCR()
        
        # Forzar carga de reglas (si no est√°n ya cargadas)
        if hasattr(aplicador, '_load_extraction_rules'):
            reglas_cargadas = aplicador._load_extraction_rules()
            logger.info(f"üìä Reglas cargadas exitosamente: {len(reglas_cargadas)} campos configurados")
        
        logger.info("‚úÖ PUNTO DE CONTROL #3 PASSED: AplicadorOCR carga reglas sin errores")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå PUNTO DE CONTROL #3 FAILED: {e}")
        return False

def test_dynamic_geometry_config():
    """
    PUNTO DE CONTROL #4: Configuraci√≥n de geometr√≠a din√°mica completa
    """
    logger.info("üîç PUNTO DE CONTROL #4: Validando configuraci√≥n de geometr√≠a din√°mica...")
    
    try:
        with open('config/extraction_rules.json', 'r', encoding='utf-8') as f:
            rules_data = json.load(f)
        
        geometry_config = rules_data['dynamic_geometry_config']
        
        # Validar campos obligatorios
        campos_requeridos = [
            'enabled', 'line_grouping_tolerance_y_ratio', 'vertical_alignment_threshold_px',
            'horizontal_alignment_threshold_px', 'region_analysis', 'spatial_search'
        ]
        
        for campo in campos_requeridos:
            assert campo in geometry_config, f"‚ùå Falta campo '{campo}' en dynamic_geometry_config"
        
        # Validar que est√° habilitada
        assert geometry_config['enabled'] == True, "‚ùå dynamic_geometry_config debe estar habilitada"
        
        # Validar estructura de region_analysis
        region_analysis = geometry_config['region_analysis']
        assert 'header_ratio' in region_analysis, "‚ùå Falta header_ratio"
        assert 'body_ratio' in region_analysis, "‚ùå Falta body_ratio"
        assert 'footer_ratio' in region_analysis, "‚ùå Falta footer_ratio"
        
        # Validar estructura de spatial_search
        spatial_search = geometry_config['spatial_search']
        assert 'preferred_directions' in spatial_search, "‚ùå Falta preferred_directions"
        assert 'distance_weights' in spatial_search, "‚ùå Falta distance_weights"
        
        logger.info("‚úÖ PUNTO DE CONTROL #4 PASSED: Configuraci√≥n de geometr√≠a din√°mica completa")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå PUNTO DE CONTROL #4 FAILED: {e}")
        return False

def test_spatial_processor_integration():
    """
    PUNTO DE CONTROL #5: Integraci√≥n con spatial_processor
    """
    logger.info("üîç PUNTO DE CONTROL #5: Validando integraci√≥n con spatial_processor...")
    
    try:
        # Importar spatial_processor
        sys.path.append('.')
        from spatial_processor import SpatialProcessor
        
        # Crear instancia de SpatialProcessor
        processor = SpatialProcessor()
        
        # Verificar que los m√©todos principales est√°n disponibles
        assert hasattr(processor, 'generate_logical_lines'), "‚ùå Falta m√©todo generate_logical_lines"
        assert hasattr(processor, 'find_nearby_values'), "‚ùå Falta m√©todo find_nearby_values"
        
        logger.info("‚úÖ PUNTO DE CONTROL #5 PASSED: Integraci√≥n con spatial_processor exitosa")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå PUNTO DE CONTROL #5 FAILED: {e}")
        return False

def test_backup_integridad():
    """
    PUNTO DE CONTROL #6: Backup PRE_MANDATE5 existe y es v√°lido
    """
    logger.info("üîç PUNTO DE CONTROL #6: Validando backup PRE_MANDATE5...")
    
    try:
        backup_path = 'config/extraction_rules.json.backup_PRE_MANDATE5_20250710_061625'
        
        # Verificar que el backup existe
        assert os.path.exists(backup_path), f"‚ùå Backup no encontrado: {backup_path}"
        
        # Verificar que el backup es v√°lido JSON
        with open(backup_path, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        assert 'extraction_rules' in backup_data, "‚ùå Backup no contiene extraction_rules"
        
        logger.info("‚úÖ PUNTO DE CONTROL #6 PASSED: Backup PRE_MANDATE5 v√°lido y disponible")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå PUNTO DE CONTROL #6 FAILED: {e}")
        return False

def run_mandato_5_integration_test():
    """
    Ejecutor principal del test integral de Mandato 5
    """
    logger.info("üöÄ INICIANDO TEST INTEGRAL MANDATO 5 - REFINAMIENTO EXHAUSTIVO")
    logger.info("üìã Filosof√≠a: Integridad Total y Perfecci√≥n Continua")
    logger.info("üìÖ Fecha: 2025-07-10 06:22 UTC")
    logger.info("=" * 80)
    
    start_time = time.time()
    tests_passed = 0
    total_tests = 6
    
    # Ejecutar todos los tests
    tests = [
        test_validacion_json_estructura,
        test_validacion_spatial_search_config,
        test_integracion_aplicador_ocr,
        test_dynamic_geometry_config,
        test_spatial_processor_integration,
        test_backup_integridad
    ]
    
    for i, test_func in enumerate(tests, 1):
        logger.info(f"\n{'='*20} TEST {i}/{total_tests} {'='*20}")
        if test_func():
            tests_passed += 1
        logger.info(f"{'='*50}")
    
    # Resultado final
    execution_time = time.time() - start_time
    success_rate = (tests_passed / total_tests) * 100
    
    logger.info("\n" + "üèÜ" * 50)
    logger.info("üìä RESUMEN FINAL - MANDATO 5 INTEGRATION TEST")
    logger.info("üèÜ" * 50)
    logger.info(f"‚úÖ Tests exitosos: {tests_passed}/{total_tests}")
    logger.info(f"üìà Tasa de √©xito: {success_rate:.1f}%")
    logger.info(f"‚è±Ô∏è  Tiempo de ejecuci√≥n: {execution_time:.2f}s")
    
    if tests_passed == total_tests:
        logger.info("üéâ MANDATO 5 - REFINAMIENTO EXHAUSTIVO: COMPLETADO EXITOSAMENTE")
        logger.info("‚úÖ Inteligencia espacial avanzada totalmente integrada")
        logger.info("‚úÖ Configuraci√≥n spatial_search_config 100% implementada")
        logger.info("‚úÖ Sistema mantiene compatibilidad e integridad total")
    else:
        logger.error("‚ùå MANDATO 5 - REFINAMIENTO EXHAUSTIVO: REQUIERE CORRECCIONES")
        logger.error(f"‚ö†Ô∏è  {total_tests - tests_passed} tests fallaron")
    
    return tests_passed == total_tests

if __name__ == "__main__":
    success = run_mandato_5_integration_test()
    sys.exit(0 if success else 1)