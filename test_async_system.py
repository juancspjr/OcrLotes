#!/usr/bin/env python3
"""
Test script para demostrar el sistema as√≠ncrono de alto volumen OCR
Muestra c√≥mo usar tanto el sistema de archivos como la API HTTP
"""

import os
import json
import time
import shutil
import requests
from datetime import datetime

def test_file_system_approach():
    """
    Test 1: Demostrar ingesta por sistema de archivos
    Simula recibos de pago m√≥vil con metadata de WhatsApp
    """
    print("üîß Test 1: Sistema de archivos as√≠ncrono")
    
    # Verificar que existe una imagen de test
    test_image = "test_factura.png"
    if not os.path.exists(test_image):
        print(f"‚ùå Imagen de test {test_image} no encontrada")
        return
    
    # Generar metadata de WhatsApp simulado
    metadata_examples = [
        {
            'request_id': '20250705-A_123456789012345@s.whatsapp.net_JuanPerez_18-30.png',
            'caption': 'Pago m√≥vil Banesco por comida'
        },
        {
            'request_id': '20250705-B_987654321098765@s.whatsapp.net_MariaGomez_19-15.png', 
            'caption': 'Transferencia Mercantil para gasolina'
        }
    ]
    
    # Crear directorio inbox si no existe
    inbox_dir = "data/inbox"
    os.makedirs(inbox_dir, exist_ok=True)
    
    # Copiar imagen con diferentes nombres y captions
    for i, meta in enumerate(metadata_examples):
        # Copiar imagen
        dest_path = os.path.join(inbox_dir, meta['request_id'])
        shutil.copy2(test_image, dest_path)
        
        # Crear archivo caption
        caption_path = dest_path.replace('.png', '.caption.txt')
        with open(caption_path, 'w', encoding='utf-8') as f:
            f.write(meta['caption'])
        
        print(f"‚úÖ Imagen {i+1} colocada en inbox: {meta['request_id']}")
        print(f"   Caption: {meta['caption']}")
    
    print(f"\n‚è±Ô∏è  Im√°genes en cola. El worker procesar√° autom√°ticamente...")
    print("   Verificar resultados en data/results/ en ~30 segundos")

def test_http_api_approach():
    """
    Test 2: Demostrar ingesta por API HTTP
    Simula integraci√≥n con n8n u otros sistemas web
    """
    print("\nüåê Test 2: API HTTP as√≠ncrona")
    
    # URL del servidor (ajustar si est√° en otro puerto)
    base_url = "http://localhost:5000"
    
    # Verificar que el servidor est√° corriendo
    try:
        response = requests.get(f"{base_url}/api/ocr/status", timeout=5)
        print("‚úÖ Servidor disponible")
        print(f"   Status: {response.json().get('status')}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Servidor no disponible: {e}")
        return
    
    # Verificar imagen de test
    test_image = "test_factura.png"
    if not os.path.exists(test_image):
        print(f"‚ùå Imagen de test {test_image} no encontrada")
        return
    
    # Preparar datos de prueba
    timestamp = datetime.now().strftime("%H-%M")
    form_data = {
        'sorteo_fecha': '20250705',
        'sorteo_conteo': 'C',
        'sender_id': '987654321098765@s.whatsapp.net',
        'sender_name': 'TestAPI',
        'hora_min': timestamp,
        'caption': 'Test de API HTTP - Pago m√≥vil provincial',
        'additional_data': json.dumps({
            'test_mode': True,
            'source': 'automated_test',
            'priority': 'normal'
        })
    }
    
    # Abrir imagen
    with open(test_image, 'rb') as img_file:
        files = {'image': ('test_api.png', img_file, 'image/png')}
        
        try:
            # Enviar imagen
            response = requests.post(
                f"{base_url}/api/ocr/process_image",
                data=form_data,
                files=files,
                timeout=10
            )
            
            if response.status_code == 202:
                result = response.json()
                request_id = result['request_id']
                print("‚úÖ Imagen enviada exitosamente")
                print(f"   Request ID: {request_id}")
                print(f"   Endpoint de consulta: {result['check_result_endpoint']}")
                
                # Esperar y consultar resultado
                print("\n‚è±Ô∏è  Esperando procesamiento...")
                return request_id.replace('.png', '')
                
            else:
                print(f"‚ùå Error enviando imagen: {response.status_code}")
                print(f"   Respuesta: {response.text}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error de conexi√≥n: {e}")

def check_api_result(request_id):
    """
    Test 3: Consultar resultado de API HTTP
    """
    if not request_id:
        return
        
    print(f"\nüîç Test 3: Consultando resultado para {request_id}")
    
    base_url = "http://localhost:5000"
    max_attempts = 6
    
    for attempt in range(max_attempts):
        try:
            response = requests.get(f"{base_url}/api/ocr/result/{request_id}", timeout=5)
            
            if response.status_code == 200:
                result = response.json()
                status = result.get('status')
                
                if status == 'completed':
                    print("‚úÖ Procesamiento completado")
                    ocr_result = result.get('result', {})
                    
                    # Mostrar informaci√≥n clave
                    print(f"   Status: {ocr_result.get('processing_status')}")
                    print(f"   Texto extra√≠do: {len(ocr_result.get('full_raw_ocr_text', ''))} caracteres")
                    print(f"   Campos extra√≠dos: {len(ocr_result.get('extracted_fields', []))}")
                    
                    # Mostrar campos extra√≠dos
                    for field in ocr_result.get('extracted_fields', []):
                        field_name = field.get('field_name')
                        value = field.get('value')
                        confidence = field.get('confidence', 0)
                        print(f"   - {field_name}: {value} (confianza: {confidence:.2f})")
                    
                    return True
                    
                elif status == 'processing':
                    print(f"   A√∫n procesando... (intento {attempt + 1}/{max_attempts})")
                    time.sleep(5)
                    
                elif status == 'error':
                    print(f"‚ùå Error en procesamiento: {result.get('message')}")
                    return False
                    
            else:
                print(f"   Error consultando: {response.status_code}")
                time.sleep(5)
                
        except requests.exceptions.RequestException as e:
            print(f"   Error de conexi√≥n: {e}")
            time.sleep(5)
    
    print("‚è∞ Timeout esperando resultado")
    return False

def test_system_monitoring():
    """
    Test 4: Monitorear estado del sistema
    """
    print("\nüìä Test 4: Monitoreo del sistema")
    
    base_url = "http://localhost:5000"
    
    try:
        response = requests.get(f"{base_url}/api/ocr/status", timeout=5)
        
        if response.status_code == 200:
            status = response.json()
            print("‚úÖ Estado del sistema:")
            print(f"   Status general: {status.get('status')}")
            
            queue_status = status.get('queue_status', {})
            print(f"   Cola inbox: {queue_status.get('inbox', 0)} im√°genes")
            print(f"   Procesando: {queue_status.get('processing', 0)} im√°genes")
            print(f"   Procesadas: {queue_status.get('processed', 0)} im√°genes")
            print(f"   Errores: {queue_status.get('errors', 0)} im√°genes")
            print(f"   Resultados: {queue_status.get('results_available', 0)} disponibles")
            
            system_info = status.get('system_info', {})
            print(f"   Worker: {'‚úÖ Activo' if system_info.get('worker_running') else '‚ùå Inactivo'}")
            print(f"   OCR: {'‚úÖ Cargado' if system_info.get('ocr_components_loaded') else '‚ùå No cargado'}")
            print(f"   Versi√≥n: {system_info.get('version', 'desconocida')}")
            
        else:
            print(f"‚ùå Error obteniendo estado: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")

def main():
    """Ejecutar todos los tests del sistema as√≠ncrono"""
    print("üöÄ Testing Sistema OCR As√≠ncrono de Alto Volumen")
    print("=" * 60)
    
    # Test 1: Sistema de archivos
    test_file_system_approach()
    
    # Test 2: API HTTP
    request_id = test_http_api_approach()
    
    # Test 3: Consultar resultado (si se envi√≥ por API)
    if request_id:
        check_api_result(request_id)
    
    # Test 4: Monitoreo
    test_system_monitoring()
    
    print("\n" + "=" * 60)
    print("‚úÖ Tests completados")
    print("\nPuedes verificar:")
    print("- Resultados en data/results/")
    print("- Im√°genes procesadas en data/processed/")
    print("- Logs del sistema en la consola del servidor")
    print("- Estado en tiempo real: http://localhost:5000/api/ocr/status")

if __name__ == "__main__":
    main()